#version 450
#extension GL_ARB_gpu_shader_int64: enable
precision highp float;

struct VoxelNode {
    uint childMask;
    uint children[8];
};

uniform struct {
	mat4 rayDirMatrix;
	vec3 position;
	vec3 ahead;
} camera;

uniform uint treeDepth;
uniform int mousePressed;
uniform float brushSize;

layout(std430, binding = 0) buffer VoxelNodes {
    VoxelNode nodes[];
};
layout(binding = 1, offset = 0) uniform atomic_uint nodeCounter;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout (rgba32f, binding = 1) uniform writeonly image2D image;

uint countBitsBefore(uint mask, uint bitPosition) {
    return bitCount(mask & ((1u << bitPosition) - 1u));
}

bool traverseOctree(vec3 p)
{
    uint nodeIndex = 0;
    float nodeSize = 1.0;
    vec3 nodeCenter = vec3(0.5);

    for(int depth = 0; depth < treeDepth; depth++) {
        VoxelNode node = nodes[nodeIndex];

        uint octant = 0;
        if(p.x > nodeCenter.x) octant |= 1;
        if(p.y > nodeCenter.y) octant |= 2;
        if(p.z > nodeCenter.z) octant |= 4;

        uint childBit = 1u << octant;

        if(depth == treeDepth - 1) {
            if((node.childMask & childBit) != 0) {
                return true;
            }
        }

        if((node.childMask & childBit) == 0) {
            return false;
        }

        nodeIndex = node.children[octant];
        if(nodeIndex == 0)
        {
            return false;
        }
       
        nodeSize *= 0.5;
        nodeCenter += nodeSize * vec3(
            (octant & 1) != 0 ? 0.5 : -0.5,
            (octant & 2) != 0 ? 0.5 : -0.5,
            (octant & 4) != 0 ? 0.5 : -0.5
        );
    }
    return false;
}

vec3 getMountainColor(vec3 position) {
    float maxY = 1.0;
    float normalizedY = position.y / maxY;
    
    float snowLine = 0.75;
    float rockLine = 0.45;
    float grassLine = 0.25;
    
    float noise1 = sin(position.x * 50.0) * cos(position.z * 50.0) * 0.05;
    float noise2 = sin(position.x * 120.0 + position.z * 75.0) * 0.07;
    
    vec3 mountainColor;
    
    if (normalizedY > snowLine) {
        float snowBlend = smoothstep(snowLine, 0.9, normalizedY);
        vec3 shadedSnow = vec3(0.8, 0.85, 0.95);
        vec3 brightSnow = vec3(1.0, 1.0, 1.0);
        mountainColor = mix(shadedSnow, brightSnow, snowBlend);
        mountainColor += vec3(noise1);
    }
    else if (normalizedY > rockLine) {
        float rockBlend = (normalizedY - rockLine) / (snowLine - rockLine);
        vec3 lowerRock = vec3(0.5, 0.4, 0.35);
        vec3 upperRock = vec3(0.7, 0.7, 0.75);
        mountainColor = mix(lowerRock, upperRock, rockBlend);
        mountainColor += vec3(noise2);
    }
    else if (normalizedY > grassLine) {
        float meadowBlend = (normalizedY - grassLine) / (rockLine - grassLine);
        vec3 alpineMeadow = vec3(0.3, 0.5, 0.2);
        vec3 rockyTerrain = vec3(0.45, 0.38, 0.32);
        mountainColor = mix(alpineMeadow, rockyTerrain, meadowBlend);
        mountainColor += vec3(noise1 * 2.0);
    }
    else {
        float forestBlend = normalizedY / grassLine;
        vec3 darkForest = vec3(0.1, 0.25, 0.1);
        vec3 lightForest = vec3(0.2, 0.35, 0.15);
        mountainColor = mix(darkForest, lightForest, forestBlend);
        mountainColor += vec3(noise2 * 1.5);
    }
    
    return mountainColor;
}

void addVoxel(vec3 p) {
    uint nodeIndex = 0;
    float nodeSize = 1.0;
    vec3 nodeCenter = vec3(0.5);

    VoxelNode node = nodes[nodeIndex];

    for(int depth = 0; depth < treeDepth; depth++) {
        VoxelNode node = nodes[nodeIndex];

        uint octant = 0;
        if(p.x > nodeCenter.x) octant |= 1;
        if(p.y > nodeCenter.y) octant |= 2;
        if(p.z > nodeCenter.z) octant |= 4;

        uint childBit = 1u << octant;

        if((node.childMask & childBit) != 0) 
        {
            nodeIndex = node.children[octant];    
        }
        else
        {
            uint newNodeIndex = atomicCounterIncrement(nodeCounter);
            atomicExchange(nodes[newNodeIndex].childMask, 0u);
            for(int i = 0; i < 8; i++) {
                atomicExchange(nodes[newNodeIndex].children[i], 0u);
            }
            atomicOr(nodes[nodeIndex].childMask, childBit);
            atomicExchange(nodes[nodeIndex].children[octant], newNodeIndex);
            
            memoryBarrierBuffer();

            nodeIndex = newNodeIndex;
        }



        nodeSize *= 0.5;
        nodeCenter += nodeSize * vec3(
            (octant & 1) != 0 ? 0.5 : -0.5,
            (octant & 2) != 0 ? 0.5 : -0.5,
            (octant & 4) != 0 ? 0.5 : -0.5
        );
    }
}

void removeVoxel(vec3 p) {
    uint nodeIndex = 0;
    float nodeSize = 1.0;
    vec3 nodeCenter = vec3(0.5);

    for(int depth = 0; depth < treeDepth; depth++) {
        VoxelNode node = nodes[nodeIndex];

        uint octant = 0;
        if(p.x > nodeCenter.x) octant |= 1;
        if(p.y > nodeCenter.y) octant |= 2;
        if(p.z > nodeCenter.z) octant |= 4;

        uint childBit = 1u << octant;

        if((node.childMask & childBit) == 0) {
        }

        if(depth == treeDepth - 1) {
            atomicAnd(nodes[nodeIndex].childMask, ~childBit);
            return;
        }

        nodeIndex = node.children[octant];
        if(nodeIndex == 0) {
            return;
        }
        
        nodeSize *= 0.5;
        nodeCenter += nodeSize * vec3(
            (octant & 1) != 0 ? 0.5 : -0.5,
            (octant & 2) != 0 ? 0.5 : -0.5,
            (octant & 4) != 0 ? 0.5 : -0.5
        );
    }
}

void applyBrush(vec3 center, float radius, float intensity, bool isRemove) {
    vec3 minBound = max(vec3(0.0), center - vec3(radius));
    vec3 maxBound = min(vec3(1.0), center + vec3(radius));
    
    float minVoxelSize = 1.0 / float(1 << treeDepth);
    float stepSize = minVoxelSize * 0.5;
    
    for(float x = minBound.x; x <= maxBound.x; x += stepSize) {
        for(float y = minBound.y; y <= maxBound.y; y += stepSize) {
            for(float z = minBound.z; z <= maxBound.z; z += stepSize) {
                
                vec3 pos = vec3(x, y, z);
                float dist = distance(center, pos);
                
                if(dist <= radius) {
                    if(isRemove) {
                        removeVoxel(pos);
                    } else {
                        addVoxel(pos);
                    }
                }
            }
        }
    }
}

void main() {
    vec2 viewportSize = imageSize(image);
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = vec2(pixelCoord / viewportSize * 2.0 - 1.0);
    
    
    vec4 pixel = vec4(uv, 1, 1);
    
    vec4 rayDir = pixel * camera.rayDirMatrix;
    vec3 rayOrigin = camera.position;

    vec3 d = normalize(rayDir.xyz);
    
    float t1 = -camera.position.y / d.y;
    float t2 = (1.0 - camera.position.y) / d.y;
    float tstart = max(min(t1, t2), 0.0);
    float tend = max(t1, t2);

    bool found = false;
    bool selected = false;
    vec3 p;
    
    vec3 stepSize;
    if (tstart < tend) {
        p = camera.position + d * tstart;
        stepSize = d * min((tend - tstart) / 580.0, 0.001);
        for (int i = 0; i < 512; i++) {
            p += stepSize;
            stepSize *= 1.002;
            if(p.x > 0 && p.y > 0 && p.z > 0 && p.x < 1 && p.y < 1 && p.z < 1) {
                if (traverseOctree(p)) {
                    float a = length(camera.position - p);
                    float b = length(p - (camera.position + camera.ahead));
                    float c = length(camera.ahead);
                    if (abs(a + b - c) < brushSize)
                    {
                        selected = true;
                    }
                    found = true; 
                    break;
                }
            }
        }
    }

    if (found) {
        vec3 color = getMountainColor(p);
        if (selected) {
            float value = 0.5;
            if (mousePressed != -1) {
                value = 0.25;
                vec3 editPoint = p - stepSize * 0.5;
                
                applyBrush(editPoint, brushSize, 1.0, bool(mousePressed));
            }
            color = mix(getMountainColor(p), vec3(1,0,0), value);
        }
        imageStore(image, pixelCoord, vec4(color, 1));
    } else {
        imageStore(image, pixelCoord, vec4(0));
    }

}